% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/md_.R, R/md_autoplot.R, R/md_flextable.R,
%   R/md_multiple.R, R/stepAIC.R, R/stepCriterion.R
\name{md_}
\alias{md_}
\alias{md_.default}
\alias{md_.survival_roc}
\alias{md_.lcmm}
\alias{md_.listof}
\alias{md_.multivar}
\alias{md_.aov}
\alias{md_.TukeyHSD}
\alias{md_.glht}
\alias{md_.binTab}
\alias{md_.DemographicTable}
\alias{md_.summary.matchit}
\alias{md_.matchit}
\alias{md_.mlm}
\alias{md_.zeroinfl}
\alias{md_.stepAIC}
\alias{md_.backwardCriterion}
\title{Writing R Objects to \pkg{rmarkdown} Document}
\usage{
\method{md_}{default}(x, xnm, ...)

\method{md_}{survival_roc}(x, xnm, ...)

\method{md_}{lcmm}(x, xnm, ...)

\method{md_}{listof}(x, xnm, font.size, ...)

\method{md_}{multivar}(x, xnm, font.size, ...)

\method{md_}{aov}(x, xnm, font.size, ...)

\method{md_}{TukeyHSD}(x, xnm, font.size, ...)

\method{md_}{glht}(x, xnm, ...)

\method{md_}{binTab}(x, xnm, ...)

\method{md_}{DemographicTable}(x, xnm, font.size = 9, ...)

\method{md_}{summary.matchit}(x, xnm, font.size, ...)

\method{md_}{matchit}(x, xnm, ...)

\method{md_}{mlm}(x, xnm, ...)

\method{md_}{zeroinfl}(x, xnm, ...)

\method{md_}{stepAIC}(x, xnm, font.size, ...)

\method{md_}{backwardCriterion}(x, xnm, font.size, ...)
}
\arguments{
\item{x}{..}

\item{xnm}{..}

\item{...}{..}

\item{font.size}{see function \link[flextable]{set_flextable_defaults}}
}
\description{
Writing R Objects to \pkg{rmarkdown} Document
}
\examples{
list(
 '`lm`' = lm(Sepal.Length ~ Species, data = iris)
) |> render_(file = 'lm')

library(nlme); list(
 '`lme`' = lme(distance ~ age, data = Orthodont, keep.data = TRUE),
 '`gls`' = gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), 
     data = Ovary, correlation = corAR1(form = ~ 1 | Mare))
) |> render_(file = 'lme_gls')

library(glmtoolbox); list(
 '`glmgee`' = glmgee(breaks ~ tension, id = wool, data = warpbreaks, corstr = 'exchangeable')
) |> render_(file = 'glmgee')

library(multcomp); list(
 '`glht` via `aov`' = aov(breaks ~ tension + wool, data = warpbreaks) |> 
   glht(linfct = mcp(tension = 'Tukey', wool = 'Dunnett')),
 '`glht` via `lm`, single `$focus`' = lm(breaks ~ tension + wool, data = warpbreaks) |> 
   glht(linfct = mcp(tension = 'Tukey')),
 '`glht` via `lm`, multiple `$focus`' = lm(breaks ~ tension + wool, data = warpbreaks) |> 
   glht(linfct = mcp(tension = 'Tukey', wool = 'Dunnett'))
) |> render_(file = 'glht')

library(ordinal); list(
 '`clm`' = clm(rating ~ temp + contact, data = wine), 
 '`clmm`' = clmm(rating ~ temp + contact + (1|judge), data = wine)
) |> render_(file = 'clm_clmm')

library(survival); list(
 '`coxph`' = rotterdam |>
 within.data.frame(expr = {
  os = Surv(dtime, death)
 }) |>
 coxph(formula = os ~ size)
) |> render_(file = 'coxph')

library(lme4); list(
 '`glmerMod`' = glmer(cbind(incidence, size-incidence) ~ period + (1|herd), 
     data = cbpp, family = binomial)
) |> render_(file = 'glmerMod')
  
library(ltm); list(
 '`cronbachAlpha`' = cronbach.alpha(LSAT, CI = TRUE, B = 500)
) |> render_(file = 'cronbachAlpha')

library(MASS); list(
 '`rlm`' = rlm(stack.loss ~ ., data = stackloss)
) |> render_(file = 'rlm')

library(VGAM)
pneumo = transform(pneumo, let = log(exposure.time))
list(
 '`vglm`' = vglm(cbind(normal, mild, severe) ~ let, propodds, data = pneumo)
) |> render_(file = 'vglm')

library(vcd); list(
 '`Kappa`' = Kappa(SexualFun)
) |> render_(file = 'Kappa')
data(mayo, package = 'survivalROC'); list(
 'survival_roc' = mayo |> 
  within.data.frame(expr = {
   time = as.difftime(time, units = 'days')
   edp = Surv(time, censor)
  }) |>
  survival_roc(formula = edp ~ mayoscore4, predict.time = 365)
) |> render_(file = 'survival_roc')
library(lcmm.tzh); list(
 '`lcmm`' = m20
) |> render_(file = 'lcmm')
library(lme4)
library(HSAUR3)
library(ordinal)
m1 = lm(mpg ~ cyl + am + hp + wt + qsec + drat + disp, data = mtc)
m2 = glmer(outcome ~ treatment + visit + (1|patientID), data = toenail,
  family = binomial, nAGQ = 20)
m3 = clmm(SURENESS ~ PROD + SOUPTYPE + (1|RESP) + (1|RESP:PROD), data = soup,
 link = 'probit', threshold = 'equidistant')
  
list(
 'multivar, `lm`' = m1 |> as.univar() |> as.multivar(subset = min_pvalue < .1),
 'multivar, `merMod`' = m2 |> as.univar() |> as.multivar(subset = min_pvalue < .1)# ,
 # 'multivar, `clmm`' = m3 |> as.univar() |> as.multivar(subset = min_pvalue < .1)# still bug
) |> render_(file = 'multivar')
list(
  '`TukeyHSD`' = aov(breaks ~ wool + tension, data = warpbreaks) |> 
    TukeyHSD(which = 'tension', ordered = TRUE)
) |> render_(file = 'aov_etc')
library(DanielBiostatistics10th); list(
  '`binTab`' = binTab(array(c(7L, 3L, 8L, 6L), dim = c(2,2)))
) |> render_(file = 'binTab')
library(DemographicTable); list(
  '`DemographicTable`' = DemographicTable(CO2, groups = 'Type', include = c('conc', 'uptake'))
) |> render_(file = 'DemographicTable')
library(MatchIt)
m = matchit(treat ~ age+educ+race+nodegree+married+re74+re75, data = lalonde)
list(
 '`matchit1`' = m,
 '`matchit2`' = m |> summary(addlvariables = 're78')
) |> render_(file = 'matchit')
list(
  '`mlm`' = lm(cbind(Sepal.Length, Petal.Length) ~ Species, data = iris)
) |> render_(file = 'mlm')
library(pscl); list(
 '`zeroinfl`' = zeroinfl(art ~ . | 1, data = bioChemists)
) |> render_(file = 'zeroinfl')
}
